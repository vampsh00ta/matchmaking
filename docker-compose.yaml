version: '3.8'
services:
  app:
    build:
      context: .
    container_name: seabattle-matchmaking
    env_file:
      - .env
    ports:
      - "${HTTP_PORT}:${HTTP_PORT}"
    restart: always
    depends_on:
      db:
        condition: service_healthy

    networks:
      - db
  db:
    image: postgres:14.6
    restart: always
    container_name: ${POSTGRES_HOST}
    hostname: ${POSTGRES_HOST}
    environment:
      POSTGRES_DB: ${POSTGRES_DB}

      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
    ports:
      - "${POSTGRES_PORT}:${POSTGRES_PORT}"
    volumes:
      - postgres_data:/var/lib/postgres
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready -d ${POSTGRES_DB} -U ${POSTGRES_USER}"]
      interval: 5s
      timeout: 5s
      retries: 5
    networks:
      - db
  redis:
    image: redis:latest
    restart: always
    ports:
      - "${REDIS_PORT}:${REDIS_PORT}"
    environment:
      - REDIS_PASSWORD="${REDIS_PASSWORD}"
      - REDIS_PORT="${REDIS_PORT}"
      - REDIS_DATABASES="${REDIS_DATABASES}"
    healthcheck:
      test: [ "CMD-SHELL", "ping" ]
      interval: 5s
      timeout: 5s
      retries: 5
  migrate:
    image: migrate/migrate
    container_name: db_migrations
    networks:
      - db
    volumes:
      - ./migration:/migration
    links:
      - db
    depends_on:
      db:
        condition: service_healthy
    command: -path=./migration -database ${POSTGRES_URL} up
networks:
  db:
    driver: bridge



volumes:
  postgres_data:
